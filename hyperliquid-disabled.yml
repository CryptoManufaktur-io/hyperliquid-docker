x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  node:
    build:
      context: ./hyperliquid
      args: # Pass ARGs from environment during build
        - CHAIN=${CHAIN:-Testnet}
        - PUB_KEY_URL=${PUB_KEY_URL}
        - MAINNET_ROOT_IPS=${MAINNET_ROOT_IPS}
        - TESTNET_ROOT_IPS=${TESTNET_ROOT_IPS}
        - MAINNET_GOSSIP_TRY_NEW_PEERS=${MAINNET_GOSSIP_TRY_NEW_PEERS}
        - TESTNET_GOSSIP_TRY_NEW_PEERS=${TESTNET_GOSSIP_TRY_NEW_PEERS}
    image: hyperliquid:local
    pull_policy: never
    user: hluser
    restart: unless-stopped
    stop_grace_period: 5m
    healthcheck: # Updated healthcheck using eth_syncing
      test: |
        CMD-SHELL
        curl -s -X POST \
             -H "Content-Type: application/json" \
             --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' \
             http://localhost:$${ETH_RPC_PORT:-3001}/evm | jq -e '.result == false'
      interval: 30s
      timeout: 10s
      retries: 5 # Increased retries slightly
      start_period: 3m # Increased start_period as port might take time
    environment:
      - DAEMON_VERSION=${HL_NODE_VERSION:-latest}
      # EXTRA_FLAGS is passed as env, hl-visor should handle it
      - EXTRA_FLAGS=${EXTRA_FLAGS:-}
      - NETWORK=${CHAIN:-Mainnet}
      - MONIKER=${MONIKER:-hyperliquid}
      - ETH_RPC_PORT=${ETH_RPC_PORT:-3001} # Internal port reference
      - GOSSIP_PORT_1=${GOSSIP_PORT_1:-4001} # Internal port reference
      - GOSSIP_PORT_2=${GOSSIP_PORT_2:-4002} # Internal port reference
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # Add ENABLE_RPC to the container environment
      - ENABLE_RPC=${ENABLE_RPC:-true}
    # Expose Gossip ports directly. ETH RPC port is exposed conditionally via rpc-shared.yml
    ports:
      - ${GOSSIP_PORT_1:-4001}:${GOSSIP_PORT_1:-4001}/tcp
      - ${GOSSIP_PORT_2:-4002}:${GOSSIP_PORT_2:-4002}/tcp
      # Add additional validator ports
      - ${VAL_PORT_3:-4003}:${VAL_PORT_3:-4003}/tcp
      - ${VAL_PORT_4:-4004}:${VAL_PORT_4:-4004}/tcp
      - ${VAL_PORT_5:-4005}:${VAL_PORT_5:-4005}/tcp
      - ${VAL_PORT_6:-4006}:${VAL_PORT_6:-4006}/tcp
    <<: *logging
    volumes:
      - hl-data:/home/hluser/hl/data
      # The VOL_NODE_CONFIG variable from .env will provide the full line for the
      # conditional node_config.json mount (either a volume definition or a comment).
      ${VOL_NODE_CONFIG}
      # Comment out the explicit override_gossip_config.json mount, as it's now handled by the Dockerfile
    entrypoint: >
      sh -c '
        CMD="/home/hluser/hl-visor run-${RUN_MODE:-non-validator} --replica-cmds-style recent-actions"
        if [ "$${ENABLE_RPC:-true}" = "true" ]; then
          CMD="$${CMD} --serve-eth-rpc"
        fi
        CMD="$${CMD} $${EXTRA_FLAGS}"
        echo "Executing: exec $${CMD}"
        exec $${CMD}
      '
    # The EXTRA_FLAGS env variable should be picked up by hl-visor internally
    labels:
      - traefik.enable=true # Keep true, actual routing depends on ext-network.yml being used
      - traefik.http.routers.${RPC_HOST:-hyperliquid}.service=${RPC_HOST:-hyperliquid}
      - traefik.http.routers.${RPC_HOST:-hyperliquid}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST:-hyperliquid}.rule=Host(`${RPC_HOST:-hyperliquid}.${DOMAIN:-local}`)
      - traefik.http.routers.${RPC_HOST:-hyperliquid}.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST:-hyperliquid}.loadbalancer.server.port=${ETH_RPC_PORT:-3001} # Target internal port
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=${ETH_RPC_PORT:-3001} # Target internal port for metrics
      - metrics.instance=${RPC_HOST:-hyperliquid} # Use RPC_HOST for instance name
      - metrics.network=${CHAIN:-Mainnet}

  pruner:
    restart: unless-stopped
    build:
      context: ./hyperliquid/pruner
    volumes:
      - hl-data:/home/hluser/hl/data # Reverted to hl-data
    image: hyperliquid-pruner:local
    pull_policy: never
    # Running as root is required for cron
    user: root
    stop_grace_period: 2m
    environment:
      # Pass schedule and retention days to the container
      - PRUNE_SCHEDULE=${PRUNE_SCHEDULE:-0 3 * * *}
      - PRUNE_RETAIN_DAYS=${PRUNE_RETAIN_DAYS:-7}
      - LOG_LEVEL=${LOG_LEVEL:-info} # Inherit log level
    <<: *logging

volumes:
  hl-data: # Reverted to hl-data
