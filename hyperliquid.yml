x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  consensus:
    build:
      context: ./hyperliquid
      args:
        - PUB_KEY_URL=${PUB_KEY_URL}
        - USERNAME=${USERNAME:-hyperliquid}
        - CHAIN=${CHAIN:-Mainnet}
    image: hyperliquid:local
    pull_policy: never
    user: "${USERNAME:-hyperliquid}"
    restart: unless-stopped
    environment:
      - CHAIN=${CHAIN:-Mainnet}
      - NODE_TYPE=${NODE_TYPE:-non-validator}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - VALIDATOR_PRIVATE_KEY=${VALIDATOR_PRIVATE_KEY:-}
      - MAINNET_ROOT_IPS=${MAINNET_ROOT_IPS:-}
      - TESTNET_ROOT_IPS=${TESTNET_ROOT_IPS:-}
      - RESERVED_PEER_IPS=${RESERVED_PEER_IPS:-}
      - EXTRA_FLAGS=${EXTRA_FLAGS:-}
      - FIREWALL_IPS=${FIREWALL_IPS:-}
      - SENTRY_IPS=${SENTRY_IPS:-}
    ports:
      - ${P2P_PORT_RANGE:-4000-4010}:${P2P_PORT_RANGE:-4000-4010}/tcp
      - ${P2P_PORT_RANGE:-4000-4010}:${P2P_PORT_RANGE:-4000-4010}/udp
    <<: *logging
    volumes:
      - consensus-data:/home/${USERNAME}
    entrypoint: ["docker-entrypoint.sh"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.${RPC_HOST}.service=${RPC_HOST}
      - traefik.http.routers.${RPC_HOST}.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST}.rule=Host(`${RPC_HOST}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST}.tls.certresolver=letsencrypt
      - traefik.http.routers.${RPC_HOST}lb.service=${RPC_HOST}
      - traefik.http.routers.${RPC_HOST}lb.entrypoints=websecure
      - traefik.http.routers.${RPC_HOST}lb.rule=Host(`${RPC_LB}.${DOMAIN}`)
      - traefik.http.routers.${RPC_HOST}lb.tls.certresolver=letsencrypt
      - traefik.http.services.${RPC_HOST}.loadbalancer.server.port=${EVM_RPC_PORT}
      - metrics.scrape=true
      - metrics.path=/metrics
      - metrics.port=${EVM_RPC_PORT}
      - metrics.instance=${RPC_HOST}
      - metrics.network=${CHAIN}

  pruner:
    build:
      context: ./pruner
      args:
        - USERNAME=${USERNAME:-hyperliquid}
    image: hyperliquid-pruner:local
    pull_policy: never
    user: root
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - consensus-data:/home/${USERNAME}
    depends_on:
      - consensus
    <<: *logging


  validator-info:
    profiles: ["tools"]
    image: curlimages/curl:latest
    user: root
    container_name: validator-info
    environment:
      - CHAIN=${CHAIN:-Testnet}
    entrypoint:
      - /bin/sh
      - -c
      - |
          # 1) Install deps (quietly)
          apk add --no-cache bash jq >/dev/null

          # 2) Re-exec into Bash and run the real work
          exec /bin/bash -c '
            echo "CHAIN set to: $${CHAIN:-Testnet}" >&2

            if [ "$${CHAIN:-Testnet}" = "Mainnet" ]; then
              URL="https://api.hyperliquid.xyz/info"
            else
              URL="https://api.hyperliquid-testnet.xyz/info"
            fi

            echo "Querying validator summaries from: $$URL" >&2
            curl -sS -X POST -H "Content-Type: application/json" \
                --data "{\"type\":\"validatorSummaries\"}" "$$URL" | jq .

            echo "Done." >&2
          '
    <<: *logging

  cli:
    profiles: ["tools"]
    build:
      context: ./hyperliquid
      args:
        - PUB_KEY_URL=${PUB_KEY_URL}
        - USERNAME=${USERNAME:-hyperliquid}
        - CHAIN=${CHAIN:-Mainnet}
    image: hyperliquid:local
    pull_policy: never
    user: "${USERNAME:-hyperliquid}"
    container_name: hyperliquid-cli
    environment:
      - CHAIN=${CHAIN:-Mainnet}
      - NODE_TYPE=${NODE_TYPE:-non-validator}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - VALIDATOR_PRIVATE_KEY=${VALIDATOR_PRIVATE_KEY:-}
      - MAINNET_ROOT_IPS=${MAINNET_ROOT_IPS:-}
      - TESTNET_ROOT_IPS=${TESTNET_ROOT_IPS:-}
      - EXTRA_FLAGS=${EXTRA_FLAGS:-}
    volumes:
      - consensus-data:/home/${USERNAME}
    entrypoint:
      - /bin/bash
      - -c
      - |
        if [ $# -eq 0 ]; then
          echo "Hyperliquid CLI Tool - Interactive Mode"
          exec bash
        else
          echo "Hyperliquid CLI Tool:"
          exec "$@"
        fi
      - --
    <<: *logging

  config-sync:
    profiles: ["tools"]
    image: hyperliquid:local
    pull_policy: never
    user: "${USERNAME:-hyperliquid}"
    environment:
      - USERNAME=${USERNAME:-hyperliquid}
      - CHAIN=${CHAIN:-Mainnet}
      - MAINNET_ROOT_IPS=${MAINNET_ROOT_IPS:-}
      - TESTNET_ROOT_IPS=${TESTNET_ROOT_IPS:-}
      - RESERVED_PEER_IPS=${RESERVED_PEER_IPS:-}
      - FIREWALL_IPS=${FIREWALL_IPS:-}
    volumes:
      - consensus-data:/home/${USERNAME}
    entrypoint:
      - /bin/bash
      - -c
      - |
        echo "🔄 Hyperliquid Configuration Sync"
        echo "Reading configuration from .env file..."

        # Function to create gossip config (same logic as docker-entrypoint.sh)
        create_gossip_config() {
          RESERVED_PEERS="$${RESERVED_PEER_IPS:-[]}"
          if [ "$${CHAIN}" = "Mainnet" ]; then
            if [ -n "$${MAINNET_ROOT_IPS}" ] && [ "$${MAINNET_ROOT_IPS}" != "[]" ]; then
              echo "Creating Mainnet gossip configuration..."
              cat > "$$HOME/override_gossip_config.json" <<EOF
        { "root_node_ips": $${MAINNET_ROOT_IPS}, "try_new_peers": false, "chain": "Mainnet", "reserved_peer_ips": $${RESERVED_PEERS} }
        EOF
              echo "✅ Created Mainnet gossip config"
            else
              echo "❌ Error: MAINNET_ROOT_IPS must be set and non-empty when CHAIN=Mainnet"
              return 1
            fi
          elif [ "$${CHAIN}" = "Testnet" ]; then
            if [ -n "$${TESTNET_ROOT_IPS}" ] && [ "$${TESTNET_ROOT_IPS}" != "[]" ]; then
              echo "Creating Testnet gossip configuration..."
              cat > "$$HOME/override_gossip_config.json" <<EOF
        { "root_node_ips": $${TESTNET_ROOT_IPS}, "try_new_peers": false, "chain": "Testnet", "reserved_peer_ips": $${RESERVED_PEERS} }
        EOF
              echo "✅ Created Testnet gossip config"
            else
              echo "ℹ️  Using default peers for Testnet"
              rm -f "$$HOME/override_gossip_config.json"
            fi
          else
            echo "⚠️  Unknown CHAIN value: $${CHAIN}"
          fi
        }

        # Function to create firewall config (same logic as docker-entrypoint.sh)
        create_firewall_config() {
          local firewall_dir="$$HOME/hl/file_mod_time_tracker"
          local firewall_file="$$firewall_dir/firewall_ips.json"

          mkdir -p "$$firewall_dir"

          if [ -n "$${FIREWALL_IPS}" ] && [ "$${FIREWALL_IPS}" != "[]" ]; then
            echo "Creating firewall configuration..."

            # Validate JSON format first
            if ! echo "$${FIREWALL_IPS}" | jq . >/dev/null 2>&1; then
              echo "❌ Error: FIREWALL_IPS contains invalid JSON format"
              return 1
            fi

            # Parse and convert to required format
            if echo "$${FIREWALL_IPS}" | jq 'map([.ip, {"name": .name, "allowed": .allowed}])' > "$$firewall_file" && [ -s "$$firewall_file" ]; then
              echo "✅ Successfully created firewall configuration"
              echo "Firewall IPs configured:"
              jq -r '.[] | "  \(.[0]) - \(.[1].name) (allowed: \(.[1].allowed))"' "$$firewall_file"
            else
              echo "❌ Error: Failed to create firewall configuration file"
              return 1
            fi
          else
            echo "Creating empty firewall configuration..."
            echo "[]" > "$$firewall_file"
            echo "✅ Created empty firewall configuration"
          fi
        }

        # Show current environment
        echo "Current configuration:"
        echo "  CHAIN: $${CHAIN:-<not set>}"
        echo "  MAINNET_ROOT_IPS: $${MAINNET_ROOT_IPS:-<not set>}"
        echo "  TESTNET_ROOT_IPS: $${TESTNET_ROOT_IPS:-<not set>}"
        echo "  RESERVED_PEER_IPS: $${RESERVED_PEER_IPS:-<not set>}"
        echo "  FIREWALL_IPS: $${FIREWALL_IPS:-<not set>}"
        echo

        # Apply configurations
        create_gossip_config
        create_firewall_config

        echo
        echo "✅ Configuration sync completed!"
        echo "The running consensus node will pick up these changes."
    <<: *logging



volumes:
  consensus-data:
